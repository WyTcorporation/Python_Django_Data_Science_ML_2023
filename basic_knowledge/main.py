# –¢–∏–ø—ã
# print(f'Hi, Vlad')
# print(f'Vlad, type {type("Vlad")}')
# print(f'{1}, type {type(1)}')
# print(f'{True}, type {type(True)}')
# print(f'{[1, "abc", True]}, type {type([1, "abc", True])}')
# print(f'{{"int": 1, "string": "abc", "boolean": True}}, type {type({"int": 1, "string": "abc", "boolean": True})}')

# –¢—Ä—é–∫–∏ —Å —Å—Ç—Ä–æ–∫–∞–º–∏
# n: int = 1_000_000_000
# print(n)
# n: int = 1000000000 #—Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä—ã , _ –¥—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç
# print(f'{n:,}')
# print(f'{n:_}')
# var: str = 'var'  # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã
# print(f'{var:<20}:')
# print(f'{var:>20}:')
# print(f'{var:^20}:')
# print(f'{var:_^20}:')
# print(f'{var:.<20}:')
# –ü–æ–ª–µ–∑–Ω—ã–µ —Ç—Ä—é–∫–∏
# –ú–æ–¥–µ–ª—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
# –ó–∞–ø—É—Å—Ç–∏–º –º–æ–¥–µ–ª—å –æ—Ç —Å—é–¥–∞
# from hacks import connect
#
# connect()  # –ú—ã —É–≤–∏–¥–∏–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–¥–µ—Ç —Ü–∏–∫–ª–∏—á–Ω–æ, —á—Ç–æ –∂–µ –¥–µ–ª–∞—Ç—å, –∏–¥–µ–º –≤ –º–æ–¥—É–ª—å

# from datetime import datetime
# now: datetime = datetime.now()
# print(f'{now:%d.%m.%y (%H:%M:%S)}')  # own format date
# print(f'{now:%c}')  # local version date
# print(f'{now:%I%p}')  # local version date

# f: float = 1234.56789
# print(f'{f:.2f}') # round to 2 after dote
# print(f'{f:.0f}') # round to 0 after dote
# print(f'{f:,.3f}') # round to 3 after dote + separator

# a: int = 5
# b: int = 10
# var: str = 'Text'
# print(f'a + b = {a + b}')
# print(f'{a + b = }')  # shorter to write
# print(f'{bool(a) = }')
# print(f'{var = }')

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# print type id len sum input round min max int str bool ... etc
# print(print)
# name = input("Enter you name: ")
# print(name)
# name = 'Vlad'
# print(dir(name))  # dir –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
# print(name.__doc__)

# # –ö –ø—Ä–∏–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å lower
# print(name.lower())
# print(name.upper())

# –°–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# def my_fn(a, b):
#     a = a + 1
#     c = a + b
#     return c
#
#
# print(my_fn(1, 2))

# print(dir(__builtins__)) # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ python –∫ –ø—Ä–∏–º–µ—Ä—É print

# name = input("Enter you name: ")
# # print(dir(name))
# age = input("Enter you age: ")
# male = input("Enter you male: ")
#
# print(f'Your name: {name.capitalize()}, age: {age}, male: {male.upper()}')

# my_list = [1, 2, 3]
# print(my_list)

# def hello():
#     print('Hello world!')
#
# def hello(name):
#     print('Hello world!', name)
#
#
# hello('Vlad')

# def sum_numbs(a, b):
#     sum = a + b
#     # print(sum)
#     return sum
#
#
# res1 = sum_numbs(10, 5)
# print(res1)
# res2 = sum_numbs(50.5, 29)
# print(res2)

# –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏/–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∑—ã–≤–∞—é—Ç –í—ã—Ä–∞–∂–µ–Ω–∏–µ–º

# print(10 + 5)

# –ù–µ –∑–Ω–∞—é –ø–æ—á–µ–º—É, –Ω–æ –æ–Ω —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞–∑–≤–∞–ª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π

# name = 'Vlad'  # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

# –£—Å–ª–æ–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
# if name:
#     print(name.upper())

# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
# import datetime
#
# print(datetime.MAXYEAR)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ/—Ñ—É–Ω–∫—Ü–∏–∏/–º–µ—Ç–æ–¥—ã/–º–æ–¥—É–ª–∏ –ø—Ä–∏–º–µ—Ä snake_case
# –ö–ª–∞—Å—Å—ã PascalCase
# –ü–∞–∫–µ—Ç—ã –∏–ª–∏ –Ω–∞–±–æ—Ä—ã –º–æ–¥—É–ª–µ–π my-package
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã DB_USER

# –í—Å–µ –≤ python —è–≤–ª—è—é—Ç—å—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏, —á—Ç–æ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É.
# –ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ –≤ —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞/—Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ–Ω–∏ —è–≤–ª—è—é—Ç—å—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏.
# –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –Ω–µ –º—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ, —á—Ç–æ –¥–∞–ª—å—à–µ –Ω–∞–∑–≤–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–µ –∏ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã.
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö: string, boolean, integer, float, tuple(–ö–∞—Ä—Ç–µ–∂–∏), None (–ù–∏—á—Ç–æ).
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∏–∑–º–µ–Ω—è–µ–º—ã—Ö: list(—Å–ø–∏—Å–æ–∫), dict(—Å–ª–æ–≤–∞—Ä—å), set(–Ω–∞–±–æ—Ä), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞–∫–∏–µ –ª–∏–±–æ

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —Å—É—Ç–∏ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏ –ø–∫
# —Ñ—É–Ω–∫—Ü–∏—è id(–∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π) –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –ø–∞–º—è—Ç–∏
# –ö –ø—Ä–∏–º–µ—Ä—É –ø–æ—á–µ–º—É –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π name = 'Vlad', new_name = name, old_name = name.
# –ú—ã –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏, –∞ –∫–æ–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞.

# name = 'Vlad'
# print(id(name))
# new_name = name
# print(id(new_name))
# old_name = name
# print(id(old_name))

# Ctrl + right or left –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É –ª–µ–≤–æ/–ø—Ä–∞–≤–æ
# ALT + up or down –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
# Ctrl + Shift –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑

# long_str = '''This
# is a very
# long string'''
# print(long_str)
# print(type(long_str))  # –¢–∏–ø
# print(id(long_str))  # –ï–≥–æ –∞–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏
# print(len(long_str))  # –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
# print(long_str[5:15])  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
# print(long_str.upper())
# print(long_str.count('is'))
# print(long_str.index('is'))
# print(long_str.capitalize())
# print(long_str.lower())
# print(long_str.replace('very', 'much')) # –ú–µ—Ç–æ–¥—ã –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.
# –û–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–≤–µ—Ç. –ú–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å

# my_comment = 'This is my short comment'
# print(len(my_comment))

# friends_qty = 50
# print(friends_qty)
# print(type(friends_qty))
#
# any_num = input('Enter any number')
# print(any_num)
# print(type(any_num))
#
# user_number = input('Enter any number')
# any_num = int(user_number)
# print(any_num)
# print(type(any_num))
#
# any_num = int(input('Enter any number'))
# print(any_num)
# print(type(any_num))

# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å
# base = 5
# power = 3
# my_pow = pow(base, power)
# print(my_pow)
# print(type(my_pow))

# # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è –∫–æ–¥–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å —á–∏—Å–ª–∞ _
# one_million = 1_000_000
# print(one_million)
# my_number = 3_427
# print(my_number)

# input_str = input('Enter any number: ')
# input_int = int(input_str)
# print(input_str)
# print(type(input_str))
# print(input_int)
# print(type(input_int))

# Float –î–µ—Å—è—Ç–∏—á–Ω—ã–µ

# average_price = 17.25
# print(average_price)
# print(type(average_price))

# average_price = 28.75
# price = int(average_price)
# print(price)
# print(type(price))
# print(round(average_price))
# str_tmp = '14.5'
# temp = float(str_tmp)
# print(temp)
# print(type(temp))

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞
# complex_a = 3+5j
# complex_b = 4+7j
# sum_complex = complex_a + complex_b
# print(sum_complex)
# print(type(sum_complex))

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ True or False
# is_auth = True
# print(is_auth)
# print(type(is_auth))
# print(100 > 24)  # True
# print(-5 > 0)  # False
# print('Long string' > 'Long')  # True —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤
# print([1, 2, 3] == [1, 2, 3])  # True
# bool(10)
# bool('10')
# bool([])
# bool([1,2])
# bool(None)
# print({'a': 3} == {'a': 5})

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤
# Python –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—è–≤–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
# str(), float(), int(), tuple(), list(), set(), dict() ...

# '10' + 2 # TypeError: can only concatenate str (not "int") to str
# 5 + '10' # TypeError: unsupported operand type(s) for +: 'int' and 'str'

# int_num = 5
# float_num = 4.5
# print(int_num + float_num)
# print(int_num.__add__(float_num)) # __add__ (–º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è int) = int_num + float_num
# NotImplemented = –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö it and float
# print(float_num.__radd__(int_num)) # __radd__ (–º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è float) = int_num + float_num –Ω–æ –æ—Ç–ª–∏—á–∏—è –æ—Ç
# add –æ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏ –ø–æ—Ç–æ–º—É –æ—à–∏–±–æ–∫ –Ω–µ –±—É–¥–µ—Ç

# –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥—ã –ø—Ä–∏–º–µ—Ä—ã (–º–æ–∂–Ω–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ dir)
# int_num = 50
# float_num = 7.5
# print(int_num + float_num)
# print(int_num * float_num)
# print(int_num.__mul__(float_num))
# print(float_num.__rmul__(int_num))
# print(float_num.__rsub__(int_num))
# print(float_num.__rmod__(int_num))
# print(float_num.__rfloordiv__(int_num))
# print(float_num.__rtruediv__(int_num))
# print(help([].__eq__)) # –í—ã–∑–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏, —á—Ç–æ –±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ—Ç–æ–¥

# –°–ø–∏—Å–∫–∏
# my_fruits = ['apple', 'banana', 'lime']
# posts_ids = [151, 245, 762, 167]
# user_inputs = [True, 'Hi!', "üëâ", 10.5]
# print(len(my_fruits))
# print(posts_ids[0])
# print(user_inputs)
# user_inputs[0] = False
# user_inputs[3] = 11.5
# print(user_inputs)
# del posts_ids[2]
# print(posts_ids)
# –ù–µ –∑–∞–±—ã–≤–∞–µ–º —á—Ç–æ –º–æ–∂–Ω–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å,
# —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
# users = [
#     {
#         'user_id': 1,
#         'user_name': 'Alice'
#     },
#     {
#         'user_id': 2,
#         'user_name': 'Maks'
#     }
# ]
# print(len(users))
# print(users[0]['user_id'])
# apple = 'apple'
# banana = 'banana'
# lime = 'lime'
# all_fruits = [apple, banana, lime]
# print(all_fruits)
# posts_ids = [151, 245, 762, 167]
# print(posts_ids[10])  # IndexError: list index out of range –¢–∞–∫–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ

# –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤

# append(–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü),
# pop(—É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–¥–∞–Ω–Ω—ã–π),
# remove,
# insert,
# sort(), sort(reverse=True) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ –æ–±—Ä–∞—Ç–Ω–æ
# index,
# clear,
# copy,
# extend,
# reverse,
# count

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ø–∏—Å–æ–∫

# hi = 'Hello from Python'
# letters = list(hi)
# print(letters)
# my_dict = {'a': 10, 'b': 90}
# dict_keys = list(my_dict)
# print(dict_keys)
# rating = [2.5, 5.0, 4.3, 3.7]
# print(min(rating))
# print(max(rating))
# print(sum(rating))
# print(sum(rating) / len(rating))

# –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
# my_fruits = ['apple', 'banana', 'lime']
# copied_cars1 = my_fruits[:]
# copied_cars2 = my_fruits.copy()
# copied_cars3 = list(my_fruits)

# –ó–∞–¥–∞–Ω–∏–µ
# my_nums = [10, 50, 0, 5, 100]
# # print(dir(my_nums))
# del my_nums[2]
# # or
# # my_nums.pop(2)
# print(len(my_nums))
# my_nums.sort()
# # or
# # my_nums.reverse()
# my_new_list = [2, 12]
# my_nums.extend(my_new_list)
# print(my_nums)

# –ó–∞–¥–∞–Ω–∏–µ 2
# l1 = [1, 2, 3, 4, 5]
# l2 = [5, 4, 3, 2, 1]
# l3 = l1 + l2
# l4 = l1.__add__(l2)
# print(l3)
# print(l4)

# –°–ª–æ–≤–∞—Ä–∏ dict {'key':'value'}

# my_bike = {
#     'brand': 'Ducati',
#     'price': 2500,
#     'engine_vol': 1.2
# }
# print(dir(my_bike))
# my_dict = {}
# print(my_dict.__doc__)
# print(my_bike['brand'])
# print(my_bike['price'])
# my_bike['price'] = 2000
# print(my_bike['price'])
# my_bike['is_new'] = True
# print(my_bike)
# del my_bike['engine_vol']
# print(my_bike)
# # –ø—Ä–∏–º–µ—Ä –∫–ª—é—á–µ–π —Å –±–∞–∑—ã
# key_name = 'engine_vol'
# my_bike[key_name] = 1.5
# print(my_bike)
# my_bike['price_info'] = {}
# my_bike['price_info']['price'] = my_bike['price']
# del my_bike['price']
# print(my_bike)
# print(len(my_bike))
# # print(my_bike['model']) # –û—à–∏–±–∫–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è
# print(my_bike.get('model'))
# print(my_bike.get('model', 'No models'))
# print(my_bike.get('brand'))


# print(id(my_bike))
# print(type(my_bike))
# print(my_bike.__doc__)
# print(my_bike.items())
# print(type(my_bike.items()))
# print(my_bike.keys())
# print(list(my_bike.keys()))
# print(my_bike.popitem())  # –£–¥–∞–ª–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç)
# new_bike = my_bike.copy()
# new_bike['type'] = 'elect'
# print(new_bike)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
# my_list = [0, True, 'abc']
# my_dict = dict(my_list)
# print(my_dict)
# my_list = [['first', 0], ['second', True]]  # –°–ª–æ–≤–∞—Ä—å
# my_list = [('first', 0), ('second', True)]  # –ö–∞—Ä—Ç–µ–∂
# my_dict = dict(my_list)
# print(my_dict)

# –ó–∞–¥–∞—á–∞
# my_dict = {}
# key1 = input('Key 1:')
# value1 = input('Value 1:')
# my_dict[key1] = value1
# key2 = input('Key 2:')
# value2 = input('Value 2:')
# my_dict[key2] = value2
# key3 = input('Key 3:')
# value3 = input('Value 3:')
# my_dict[key3] = value3
# print(my_dict)

# –ö–æ—Ä—Ç–µ–∂–∏ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# –ü–æ —Å—É—Ç–∏ —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫, –Ω–æ –∫–æ—Ä—Ç–µ–∂ –ù–ï –∏–∑–º–µ–Ω—è–µ–º—ã–µ (—É–¥–∞–ª–∏, –¥–æ–±–∞–≤–∏—Ç—å –∏ —Ç.–¥. –ù–ï–õ–¨–ó–Ø)
# my_tuple = ('a', 2, True, 'üî•')
# my_tuple = ('a', 2, True, 'üî•')

# –ù–∞–±–æ—Ä—ã - –ù–ï —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# –¢–æ—Ç –∂–µ —Å–ª–æ–≤–∞—Ä—å, –Ω–æ –±–µ–∑ –∫–ª—é—á–µ–π
# users_inputs = {'a', 2, True, 'üî•'}
# users_inputs_dict = {'str': 'a', 'int': 2, 'bool': True, 'random': 'üî•'}
# print(type(users_inputs))
# print(type(users_inputs_dict))
# # –ó–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ –±—ã —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω
# ids: set[int] = {1, 2, 3, 4, 1, 3, 5}
# ids.add(6)
# ids.add(7)
# ids.add(7)
# print(type(ids))
# print(ids)

# –ú–µ—Ç–æ–¥—ã –Ω–∞–±–æ—Ä–∞, –∑–∞ —Å—á–µ—Ç –∏—Ö —ç—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –º–æ—â–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
# add, union, remove, difference, intersection (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ),
# discard, clear, copy, update, issubset (–≤—Ö–æ–¥–∏—Ç –ª–∏ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –≤ –¥—Ä—É–≥–æ–π), issuperset, pop
# photo_size: set[str] = {'1920x1080', '800x600'}
# photo_size.add('1024x768')
# print(photo_size)
# other_sizes: set[str] = {'800x600', '1024x628'}
# all_sizes: set[str] = photo_size.union(other_sizes)
# print(all_sizes)
# common_s: set[str] = photo_size.intersection(other_sizes)
# print(common_s)

# nums: set[int] = {10, 5, 35}
# other_nums: set[int] = {20, 5, 12, 10, 35}
# res: bool = nums.issubset(other_nums)
# print(res)

# –ü—Ä–∞–∫—Ç–∏–∫–∞
# my_set: set[str] = {'abc', 'd', 'f', 'y'}
# other_set: set[str] = {'a', 'f', 'd'}
# print(my_set.intersection(other_set))
# print(other_set.intersection(my_set))
# print(my_set.intersection('abc'))
# print(my_set.intersection('abcd') == my_set.intersection(['a', 'b', 'c', 'd']))
# print(my_set.union(other_set))
# print(my_set.issubset(other_set))
# print(my_set.issuperset({'f', 'd'}))
# print(other_set.issubset(my_set))
# print(my_set.difference(other_set))
# my_set.discard('abc')
# print(my_set)
# my_set.discard('def')
# print(my_set)
# # my_set.remove('def') #–ë—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç discard
# # print(my_set)
# new_set:set[str] = my_set.copy()
# new_set.add('t')
# print(new_set)
# print(my_set.symmetric_difference(new_set))

# –ó–∞–¥–∞—á–∞
# my_set: set[int] = {1, 2, 3, 4, 5, 6, 7, 8, 9}
# my_set.add(10)
# other_set: set[int] = {2, 12, 3, 23, 56, 7}
# new_set: list[int] = list(my_set.intersection(other_set))
# print(type(new_set))
# print(new_set)

# –î–∏–∞–ø–∞–∑–æ–Ω—ã - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ù–ï –∏–∑–º–µ–Ω—è–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ü–∏–∫–ª–∞—Ö

# my_range = range(7)
# print(type(my_range))
# print(my_range)
# print(list(my_range))

# my_range = range(10, 20, 3)  # 10 - 20 –¥–∏–∞–ø–∞–∑–æ–Ω –∏ —à–∞–≥ 3
# print(type(my_range))
# print(my_range)
# print(list(my_range))
# print(my_range[1])
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–∏–∫–ª–µ
# for n in my_range:
#     print(n)


# –ü—Ä–∞–∫—Ç–∏–∫–∞
# my_range = range(5)
# print(type(my_range))
# print(my_range)
# # print(my_range[-1])
# for n in my_range:
#     print(n)
# print(my_range.count(10))
# print(my_range.start)
# print(my_range.stop)
# print(my_range.step)
# print(my_range.index(2))

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ ‚ùå ‚úÖ
# –¢–∏–ø  –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–æ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —ç–µ–ª–µ–º–µ–Ω—Ç—ã  —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# list    ‚úÖ       ‚úÖ       ‚úÖ                  –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
# tuple   ‚ùå       ‚úÖ       ‚úÖ                  –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
# set     ‚úÖ       ‚ùå       ‚ùå                  –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
# range   ‚ùå       ‚úÖ       ‚ùå                  –ù —Ä–∞–∑ –¥–µ–π—Å—Ç–≤–∏—è
# dict    ‚úÖ       ‚ùå       ‚ùå                  –°–ø—Ä—è–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –±–æ–ª—å—à–∏–µ
# str     ‚ùå       ‚úÖ       ‚úÖ


# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ZIP (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
# fruits = ['apple', 'banana', 'lime']
# quantities = [100, 70, 50]
# sailed = (True, False, True)
# # fruit_qty_zip = zip(fruits, quantities, sailed)
# fruit_qty_zip = zip(fruits, quantities)
# print(fruit_qty_zip)
# # fruit_qty_list = list(fruit_qty_zip)
# # print(fruit_qty_list)
# # –ü–æ—Å–∫–æ–ª—å–∫—É –∑–∏–ø —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–∞—è—Ç–∏,
# # –º—ã –µ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –≤ –ª–∏—Å—Ç –∏ –¥–∏–∫—Ç –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
# fruit_qty_dict = dict(fruit_qty_zip)
# print(fruit_qty_dict)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
# –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –ù–ï –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
# number_1 = 10
# number_2 = 10
# number_3 = 10
# print(id(number_1))
# print(id(number_2))
# print(id(number_3))
# –°—É—Ç—å —Ç–∞–∫–∞—è —á—Ç–æ python –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Ç –ª–∏ —Ç–∞–∫–æ–≥–æ –∂–µ
# –æ–±—ä–µ–∫—Ç–∞ –≤ –ø–∞–º—è—Ç–∏ –∏ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∞–¥—Ä–µ—Å

# –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
# my_list_1 = [1, 2, 3]
# my_list_2 = [1, 2, 3]
# print(id(my_list_1))
# print(id(my_list_2))
# my_list_3 = my_list_1
# print(id(my_list_1))
# print(id(my_list_3))
# my_list_3.append(4)
# print(my_list_1)
# print(my_list_3)
# –°—É—Ç—å —Ç–∞–∫–∞—è, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –ø—Ä–∏—Å–≤–∞–µ—Ç–µ –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
# –∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–ù–ï copy),
# —Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

# –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π
# info = {
#     'name': 'Bob',
#     'is': True,
#     'reviews': []
# }
# info_copy = info.copy()
# info_copy['reviews'].append('Great course!')
# print(info)
# print(info_copy)
# –ö–∞–∫ –≤–∏–¥–∏—à—å –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫, —Å–ª–æ–≤–∞—Ä—å
# –∏–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω—è–µ–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä—è–¥–∫–∞ reviews,
# —Ç–æ –æ–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –≤ —è—á–µ–π–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞

# –ö–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫ —á—Ç–æ –±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–∫–æ–≥–æ
# from copy import deepcopy
# info_copy_deepcopy = deepcopy(info)
# info_copy_deepcopy['reviews'].append('Great course!')
# print(info)
# print(info_copy_deepcopy)

# –§—É–Ω–∫—Ü–∏–∏
# def sum_numb(a: int, b: int) -> int:
#     return a + b
#
#
# a: int = 5
# b: int = 10
# print(sum_numb(a, b))

# def my_func():
#     ...
#
# def my_func_2():
#     pass
#
# print(my_func())
# print(my_func_2())

# –ü–µ—Ä–µ–¥–∞—á–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
# def person_age(person: dict) -> dict:
#     person['age'] += 1
#     return person
#
#
# person_one: dict = {
#     'name': 'Bob',
#     'age': 21
# }
#
# person_age(person_one)
# print(person_one)

# Homework
# def merge_lists_to_dict(a: list[str], b: list) -> dict:
#     # if len(a) != len(b):
#     #     print('Lists length not same, please check it!')
#     #     return {}
#     # –í—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É —Ä—É–∫–∞–º–∏ ))) –ü–æ–ª–µ–∑–Ω–æ
#     assert len(a) == len(b), "Lists must be of the same length"
#     return dict(zip(a, b))
#
#
# l1 = ['one', 'two', 'three']
# l2 = [1, 2, 3]
# dict1: dict = merge_lists_to_dict(l1, l2)
# print(dict1)


# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ tuple(–∫–æ—Ä—Ç–µ–∂)
# def sum_numbs(*args):
#     print(args)
#     print(type(args))
#     return sum(args)
#
#
# print(sum_numbs(1, 2, 6, 7, 9))


# def my_func(name: str, age: int) -> None:
#     print(f'Name {name}, age: {age}')
#
#
# my_func(name='Vlad', age=36)


# –î–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—é—Ç –∫–ª—é—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
# –µ—Å–ª–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –∫–ª—é—á–∏, —Ç–æ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω,
# –Ω–æ –ª—É—á—à–µ —á—Ç–æ –±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ dict(—Å–ª–æ–≤–∞—Ä—å)
# def get_person(**person) -> dict:
#     # print(person)
#     # print(type(person))
#     # print(person['name'])
#     # print(person['age'])
#     return person
#
#
# info: dict = get_person(name='Vlad', age=36)
# print(info)

# –ó–∞–¥–∞—á–∞
# def merge_lists_to_dict(a: list[str], b: list) -> dict:
#     assert len(a) == len(b), "Lists must be of the same length"
#     return dict(zip(a, b))
#
#
# l1 = ['one', 'two', 'three']
# l2 = [1, 2, 3]
# dict1: dict = merge_lists_to_dict(a=l1, b=l2)
# print(dict1)
#
#
# def update_car_info(**car) -> dict:
#     car['is_available'] = True
#     return car
#
#
# print(update_car_info(brand='BMW', price=1200))

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# def my_func(a: int, b: int = 1) -> int:
#     return a + b
#
#
# print(my_func(1, 2))
# print(my_func(1))

# from datetime import date
#
#
# def get_weekday():
#     return date.today().strftime('%A')
#
#
# def create_post(post, weekday=get_weekday()):
#     post['created_at'] = weekday
#     return post
#
#
# post = {
#     'id': 1,
#     'author': 'Vlad'
# }
#
# print(create_post(post))

# –ö–æ–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏–∏

# def func():
#     pass
#
#
# def main_func(callback_func): # –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Ñ-—Ü–∏—é –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –û–ë–ï–ó–ê–¢–ï–õ–¨–ù–û –µ—ë –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º
#     callback_func()
#
#
# main_func(func)

# –ü—Ä–∏–º–µ—Ä 1
# def print_number(num: int) -> None:
#     if (num % 2) == 0:
#         print('Number is even')
#     else:
#         print('Number is odd')
#
#
# def process_number(num: int, callback_fn):
#     callback_fn(num)
#
#
# number: int = 7
#
# process_number(number, print_number)

# –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
# 1. –ù–∞–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# 2. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –≥–ª–∞–≥–æ–ª–∞
# 3. –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ/–∑–∞–¥–∞—á–∞
# 4. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω—è—Ç—å –≤–Ω–µ—à–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–æ–≤/–º–æ–¥—É–ª–µ–π –∏ —Ç.–¥. (docstring)
# def mult_by_factor(a:int, b:int)->int:
#     """Multiplies numbers by multiplicator"""
#     return a * b
#
#
# mult_by_factor(1, 2)

# def print_numbers_info(num: int) -> None:
#     """
#     Prints whether number is event or odd
#     :param num: (int) Number to be evaluated
#     :return: None
#     """
#     if (num % 2) == 0:
#         print('Num is event')
#     else:
#         print('Num is odd')
#
#
# print_numbers_info(10)

# –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
# –í—Å–µ —á—Ç–æ –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π,
# —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π

# a = 10  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è (–±—É–¥–µ—Ç –∂–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã)
#
#
# def my_func():
#     a = True  # –õ–æ–∫–∞–ª—å–Ω–∞—è (–±—É–¥–µ—Ç –∂–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏)
#     print(a)
#
#
# print(a)

# –¢–∞–∫ –∂–µ –º–æ–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# –ù–æ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
# def my_func():
#     global a
#     a = True
#
#
# my_func()
# print(a)

# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
# a = 10  # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ =
# –û–ø–µ—Ä–∞–Ω–¥ –û–ø–µ—Ä–∞—Ç–æ—Ä –û–ø–µ—Ä–∞–Ω–¥ -> a = 10
# –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ
# + - * /
# –°—Ä–∞–≤–Ω–µ–Ω–∏—è
# == != < >
# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ
# not or and
# –¢–µ–∫—Å—Ç–æ–≤—ã–µ
# is is not in not in
# a = [1, 2]
# b = [1, 2]
# print(a == b)
# print(a.__eq__(b))

# –£–Ω–∞—Ä–Ω—ã–µ –∏ –±–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# –£–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω –æ–ø–µ—Ä–∞–Ω–¥
# -my_number
# +my_number
# not is_activated
# my_number = 10
# print(+my_number)
# print(not my_number)  # –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ 0 –±—É–¥–µ—Ç False
# my_bool = False
# print(+my_bool)
# –ò–Ω—Ñ–∏–∫—Å–Ω–∞—è –∑–∞–ø–∏—Å—å
# –ö–æ–≥–¥–∞ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ç–æ–º–∏
# a = 5
# a + b
# a += 5 # –£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 5
# a == b
# a and b
# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã in not in
# my_car: dict = {
#     'brand': 'Toyota',
#     'price': 150
# }
# print('brand' in my_car)
# print('year' in my_car)
# print('year' not in my_car)

# –ó–∞–¥–∞—á–∞

# my_numbs_1: set = {1, 2, 3, 4, 5}
# my_numbs_2: set = {1, 2, 3, 4, 5}
# print(my_numbs_1 == my_numbs_2)
# print(my_numbs_1.__eq__(my_numbs_2))
# print(my_numbs_1 is my_numbs_2)
# print(list(my_numbs_1)[0] in my_numbs_2)

# –õ–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
# print(bool(0))
# print(bool(0.0))
# print(bool(0j))
# print(bool(False))
# print(bool(None))
# print(bool({}))
# print(bool([]))
# print(bool(()))
# print(bool(set()))
# print(bool(range(0)))
# print(bool(''))
# print({})
# print(not {})
# print(not not {})

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
# not and or
# print(not 0)
# print(not 1)
# print(10 == 10 and 11 == 11)
# print(10 == 11 and 11 == 12)
# print(10 == 11 or 11 == 11)
# print(10 == 10 or 11 == 12)
# print(10 == 11 or 11 == 12)

# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã**
# button: dict = {
#     'width': 200,
#     'text': 'Buy'
# }
#
# red_button: dict = {
#     **button,
#     'color': 'red'
# }
# print(button)
# print(red_button)
#
# grey_button: dict = {
#     'width': 200,
#     'text': 'Buy',
#     'color': 'grey'
# }
# blue_button: dict = {
#     **grey_button,
#     'color': 'blue'
# }
# print(grey_button)
# print(blue_button)

# button_default: dict = {
#     'text': 'Ok',
#     'width': 0,
#     'height': 0,
#     'color': 'black'
# }
# button_style: dict = {
#     'width': 200,
#     'height': 200,
#     'color': 'grey'
# }
# # –í–∞—Ä–∏–∞–Ω—Ç 1
# # button: dict = {
# #     **button_default,
# #     **button_style
# # }
# # –í–∞—Ä–∏–∞–Ω—Ç 2
# button: dict = button_default | button_style
#
# print(button)

# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
# line: str = 'Hello ' + 'Python'
# print(line)
# hello: str = 'Hello'
# world: str = 'world'
# greeting: str = hello + ' ' + world
# print(greeting)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ f-strings
# hello: str = 'Hello'
# world: str = 'world'
# greeting: str = f'{hello} {world}'
# print(greeting)

# lambda —Ñ—É–Ω–∫—Ü–∏–∏ - –û–Ω–∏ –≤—Å–µ–≥–¥–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ
# lambda parameters: expression
# –ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
# def mult(a: int, b: int) -> int:
#     return a * b
#
# lambda a, b: a * b

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ lambda —Ñ—É–Ω–∫—Ü–∏–π

# def greeting(greet):
#     return lambda name: f'{greet}, {name}'
#
#
# morning_greeting = greeting('Good Morning')
# print(morning_greeting('Vlad'))
#
# evening_greeting = greeting('Good Evening')
# print(evening_greeting('Vlad'))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

# print(10 / 0)

# try:
#     # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞
#     pass
# except ErrorType:
#     # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –±–ª–æ–∫–µ try
#     pass

# try:
#     print(10 / 0)
# except ZeroDivisionError:
#     print('Error - Division by zero')
#
# print('Continue...')


# try:
#     print(10 / 0)
# except ZeroDivisionError as e:
#     print(type(e))
#     print(e)
#     print(dir(e))
#     print(e.__str__())
#
# print('Continue...')

# try:
#     print('10' / 0)
# except ZeroDivisionError as e:
#     print(e)
# except TypeError as e:
#     print(e)
#
# print('Continue...')


# try:
#     print(10 / 5)
# except ZeroDivisionError as e:
#     print(e)
# else:
#     print('There was no error')  # –ë–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
# finally:
#     print('Continue...')  # –ë–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

# –û–± —Ä–æ–±–æ—Ç–∫–∞ –æ–±—â–∏–º –∫–ª–∞—Å—Å–æ–º/–≤—Å–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º –∫–∞–∫–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
# try:
#     print(10 / 0)
# except Exception as e: # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
#     print(e)
#
# # OR
#
# try:
#     print(10 / 0)
# except: # –ù–µ –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç
#     print('Some error occurred')

# try:
#     print(10 / 0)
# except ZeroDivisionError as e:
#     print(e)
#     print(isinstance(e, str))
#     print(isinstance(e, ZeroDivisionError))
#     print(isinstance(e, Exception))
#
# print('Continue...')

# def divide_nums(a: int, b: int) -> float:
#     if b == 0:
#         raise TypeError('Second argument can\'t be 0')
#     return a / b
#
#
# try:
#     divide_nums(10, 0)
# except Exception as e:
#     print(e)

# –ó–∞–¥–∞—á–∞
# def image_info(args: dict) -> None:
#     if ('image_id' not in args) or ('image_title' not in args):
#         raise TypeError('You don\'t have image_id or image_title')
#     print(f'Image {args["image_title"]} has id {args["image_id"]}')
#
#
# try:
#     image_info({
#         'image_id': 5136,
#         # 'image_title': 'My cat'
#     })
# except TypeError as e:
#     print(e)


# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏ –∫–æ—Ä—Ç–µ–∂–∞
# # my_fruits: list = ['apple', 'banana', 'lime']
# my_fruits: tuple = ('apple', 'banana', 'lime')
# # apple: str = my_fruits[0] # –ø–æ —ç–ª–µ–º–µ–Ω—Ç–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
# # apple, banana, lime = my_fruits
# # print(apple)
# apple, *other = my_fruits
# print(other)

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è
# user_profile: dict = {
#     'name': 'Vlad',
#     'qty': 23
# }
#
#
# def user_info(name: str, qty: int = 0) -> str:
#     if not qty:
#         return f'{name} has no comments'
#
#     return f'{name} has {qty} comments'
#
#
# print(user_info(**user_profile))
# name, qty = user_profile
# print(name)

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
# if
# if...else
# if elif else
# —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä

# –°—É—Ç—å if –µ—Å–ª–∏ –Ω–µ –ª–æ–∂–Ω–æ–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥
# –õ–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
# {}, [], set(), range(0), "" (str), 0, 0.0, 0j, False, None
# numb = 10
# if numb > 0:
#     print('True')
#
# info: dict = {
#     'age': 10
# }
#
# if not info.get('name'):
#     print('Name is absent')
# elif info.get('name'):
#     print(f'Your name is {info.get("name")}')
# else:
#     print('Some Error')

# –ó–∞–¥–∞—á–∞
# info: dict = {
#     # 'distance': 10,
#     # 'speed': 100,
#     # 'time': 10
# }
#
#
# def route_info(args: dict) -> str:
#     # if args.get('distance') and not args.get('distance') % 2:
#     #     return f"Distance to your destination is {args.get('distance')}"
#     # elif args.get('speed') and args.get('time'):
#     #     return f"Distance to your destination is {args.get('speed') * args.get('time')}"
#     # else:
#     #     return f"No distance info is available"
#
#     # –û—Ç–≤–µ—Ç, –º–æ–π –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è –±–æ–ª—å—à–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —Ç—É—Ç –µ—Å—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É
#     if ('distance' in args) and (type(args['distance']) == int):
#         return f"Distance to your destination is {args['distance']}"
#     if ('speed' in args) and ('time' in args):
#         return f"Distance to your destination is {args['speed'] * args['time']}"
#     else:
#         return f"No distance info is available"
#
#
# print(route_info(info))

# –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (—É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
# –í—ã—Ä–∞–∂–µ–Ω–∏–µ_1 if –£—Å–ª–æ–≤–∏–µ else –í—ã—Ä–∞–∂–µ–Ω–∏–µ_2

# –ü—Ä–∏–º–µ—Ä—ã
# numb: int = 20.5
# print('is int') if type(numb) is int else print('is not int')

# qty = 10
#
# print('in stock' if qty > 0 else 'out of stock')
#
# temp = +23
# weather = 'hot' if temp > 18 else 'cold'
# print(weather)

# –¶–∏–∫–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (dict, list, tuple, set, range,str)
# for ... in ...
# while

# for —ç–ª–µ–º–µ–Ω—Ç (—Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) in –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (dict, list, tuple, set, range,str)
#    –î–µ–π—Å—Ç–≤–∏–µ

# my_list: list = [True, 10, 'abc', {}]  # –°–ø–∏—Å–æ–∫
# for elem in my_list:
#     print(elem)

# my_list: set = {True, 10, 'abc', {}}  # set Error!
# for elem in my_list:
#     print(elem)

# my_list: dict = {0: True, 1: 10, 2: 'abc', 3: {}}  # –°–ª–æ–≤–∞—Ä—å set
# for key in my_list:
#     print(key, my_list[key])
#
# my_list: tuple = (True, 10, 'abc', {})  # –ö–∞—Ä—Ç–µ–∂ tuple
# for elem in my_list:
#     print(elem)

# Items

# my_object: dict = {
#     'x': 10, 'y': True
# }
#
# for item in my_object.items():
#     key, val = item
#     print(key, val)

# Filter

# def filter_list(list_to_filter, value_type):
#     # def check_element_type(elem):
#     #     # return isinstance(elem, value_type) # –∏–ª–∏ —á—Ç–æ –∏ –ª—É—á—à–µ
#     #     return type(elem) is value_type
#     # # filter(—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–ø–∏—Å–æ–∫ —á—Ç–æ. –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)
#     # return list(filter(check_element_type, list_to_filter))
#     # –°–æ–∫—Ä–∞—Ç–∏–º –∫–æ–¥)))
#     return list(filter(lambda elem: type(elem) is value_type, list_to_filter))
#
#
# # –ò—â–µ–º –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ int
# res = filter_list([1, 10, 'abc', 5.5, True], int)
# print(res)

# While

# i = 10
# while i < 50:
#     print(i)
#     i += 10  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞!

# while True:  # –ë–µ–∑ –∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª !!!–¢–ê–ö –î–ï–õ–ê–¢–¨ –ù–ï–õ–¨–ó–Ø –ò –ó–ê–ü–†–ï–©–ï–ù–û!!! –ë–µ–∑ —É—Å–ª–æ–≤–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
#     print('Infinite loop')
# –ü—Ä–∏–º–µ—Ä —Å —É—Å–ª–æ–≤–∏—è–º–∏ –±–µ–∑–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
# while True:
#     answer = input('Enter yes or no: ')
#     if answer == 'no':
#         break

# import random
#
# random_num = random.randint(1, 5) # –æ—Ç 1 –¥–æ 5
#
# while True:
#     num = int(input('1 to 5: '))
#     if num != random_num:
#         print('Try again... )))')
#         continue
#
#     print('Congratulations!)))', random_num)
#     break

# –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ü–∏–∫–ª for in list, dict, tuple, set
# –í—ã—Ä–∞–∂–µ–Ω–∏–µ for —ç–ª–µ–º–µ–Ω—Ç in –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å if –£—Å–ª–æ–≤–∏—è

# all_numbs: list = [-2, 1, 0, 10, -2, 5]
# # absolute_numbs:list = []
# # for num in all_numbs:
# #     absolute_numbs.append(abs(num))
# # print(absolute_numbs)
# # print(all_numbs)
#
# # absolute_numbs:list = [abs(num) for num in all_numbs]
# absolute_numbs:list = [abs(num) for num in all_numbs if num > 0]
#
# print(absolute_numbs)

# my_set: set = {1, 10, 15}
#
# new_set:set = {val * val for val in my_set}
# print(new_set)

# my_scores: dict = {
#     'a': 10,
#     'b': 7,
#     'c': 14
# }
#
# scores: dict = {key: val * 10 for key, val in my_scores.items()}
# print(scores)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º for in

# numbs = (3, 5, 10)
# sqr = list((num * num for num in numbs))
# print(sqr)

# sqr = tuple((num * num for num in range(6)))
# print(sqr)


# –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º —Ä–∞–∑–Ω–∏—Ü—É)))

# from sys import getsizeof
#
# my_list = (num * num for num in range(100_000_000))  # generator
# print(getsizeof(my_list))
# print(type(my_list))
# # 200
# my_tuple = [num * num for num in range(100_000_000)]  # list
# # 835128600
# print(getsizeof(my_tuple))
# print(type(my_tuple))
# # –°—É—Ç—å —Ç–∞–∫–∞—è —á—Ç–æ generator –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏ PC

# Class and Objects
# –ö–ª–∞—Å—Å—ã —ç—Ç–æ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ 170
# class Car:
#     def move(self):
#         print('Car is moving')
#
#     def stop(self):
#         print('Car is stop')
#
#
# my_car = Car()
# print(type(my_car))
# print(isinstance(my_car, Car))
# print(dir(my_car))
# my_car.stop()
# my_car.move()
# print(my_car.__dict__)
#
# my_second_car = Car()
#
# print(my_car == my_second_car)
# print(id(my_car), id(my_second_car))

# –ú–µ—Ç–æ–¥ __init__

# class Comment:
#     # –ï—Å–ª–∏ –º—ã –≤—ã–∑—ã–≤–∞–µ–º Comment(—Å–æ —Å–∫–æ–±–∫–∞–º–∏), —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è  __init__
#     def __init__(self, text: str) -> None:
#         self.text = text
#         self.qty = 0
#
#     def upvote(self) -> None:
#         self.qty += 1
#
#
# first_comment = Comment('First Comment')
# print(first_comment.__dict__)
# print(first_comment.text)
# print(first_comment.qty)
# first_comment.upvote()
# print(first_comment.qty)

# –ó–∞–¥–∞—á–∞
# class Image:
#     def __init__(self, resolution: str, title: str, extension: str) -> None:
#         self.resolution = resolution
#         self.title = title
#         self.extension = extension
#
#     def resize(self, resol) -> None:
#         self.resolution = resol
#
#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ –≤ –æ–±—ä–µ–∫—Ç print(img)
#     def __str__(self):
#         return self.title + '.' + self.extension
#
#
# img: Image = Image('1900x600', 'My image', 'png')
# print(img.__dict__)
# img.resize('800x600')
# print(img.__dict__)
# print(img)

# @staticmethod
# class Comment:
#     def __init__(self, text: str) -> None:
#         self.text = text
#
#     @staticmethod
#     def merge_comments(first: str, second: str) -> str:
#         return f"{first} {second}"
#
#
# comment: Comment = Comment('My comment')
#
# new_comment: str = comment.merge_comments('First', 'Second')  # –ê—Ç—Ä–∏–±—É—Ç –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
# print(new_comment)
# new_comment2: str = Comment.merge_comments('First', 'Second')  # –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
# print(new_comment2)

# –ê—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
# class Comment:
#     total_comments = 0
#
#     def __init__(self, text: str) -> None:
#         self.text = text
#         self.qty = 0
#         Comment.total_comments += 1
#
#
# print(Comment.total_comments)
# comment1: Comment = Comment('My comment1')
# print(Comment.total_comments)
# comment2: Comment = Comment('My comment2')
# print(Comment.total_comments)

# –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ –ö–ª–∞—Å—Å–∞—Ö
# class Comment:
#     def __init__(self, text: str) -> None:
#         self.text = text
#         self.qty = 0
#
#     def upvote(self) -> None:
#         self.qty += 1
#
#     def __add__(self, other) -> tuple:
#         return (f'{self.text} {other.text}',
#                 self.qty + other.qty)
#
#
# comment1: Comment = Comment('My comment1')
# comment1.upvote()
# comment2: Comment = Comment('My comment2')
# comment2.upvote()
# print(comment1 + comment2)
# # –û–Ω–∏ –Ω–µ –ø–ª—é—Å—É—é—Ç—å—Å—è,
# # –∞ –Ω–∞–º –Ω–∞–¥–æ –∏—Ö –ø—Ä–∏–±–∞–≤–∏—Ç—å. –î–æ–±–∞–≤–∏–º –º–∞–≥ –º–µ—Ç–æ–¥ __add__,
# # –≤ –Ω–µ–º –æ–ø–∏—à–µ–º –∫–∞–∫ –Ω–∞–º –Ω—Ä–∞–≤–∏—Ç—å—Å—è

# –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ –ø–æ–¥–∫–ª–∞—Å—Å—ã (–ø–æ —Å—É—Ç–∏ –∫–ª–∞—Å—Å –±–µ–∑ –Ω–∏—á–µ–≥–æ –∫–∞–∫ —è –ø–æ–Ω—è–ª)
# class ExtendedList(list):
#     def print_list_info(self):
#         print(f'List has {len(self)} elements')
#
#
# custom_list: ExtendedList = ExtendedList([3, 4, 5, 6])
#
# custom_list.print_list_info()

# –î–ï–ö–û–†–ê–¢–û–†–´
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã - —Å–ø–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –í–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# –ö –ø—Ä–∏–º–µ—Ä—É –º—ã —Ö–æ—Ç–∏–º —á—Ç–æ-—Ç–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—à–µ–π —Ñ-—Ü–∏–µ–π –∏ –ø–æ—Å–ª–µ –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# def decoration_func(original_function):
#     def wrapper(*args, **kwargs):
#         # –î–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
#         print('Executed before function')
#         result = original_function(*args, **kwargs)
#         # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
#         print('Function result:', result)
#         print('Executed after function')
#         return result
#
#     return wrapper
#
#
# @decoration_func
# def my_func(a, b):
#     print('This is my function')
#     return a, b
#
#
# res = my_func(100, 50)
# print(res)
# –ü—Ä–∏–º–µ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

# def logs_fn(fn):
#     def wrapper(*args, **kwargs):
#         print(f'Function name: {fn.__name__}')
#         print(f'Function arguments: {args}, {kwargs}')
#         result = fn(*args, **kwargs)
#         print(f'Function result: {result}')
#         return result
#
#     return wrapper
#
#
# @logs_fn
# def mult(a: int, b: int) -> int:
#     return a * b
#
#
# print(mult(2, 5))
#
#
# @logs_fn
# def sum(a: int, b: int) -> int:
#     return a + b
#
#
# print(sum(2, 5))

# –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

# def validate_args(fn):
#     def wrapper(*args, **kwargs):
#         # for arg in args:
#         #     if not isinstance(arg, int) and not isinstance(arg, float):
#         #         raise ValueError(f'Type of the {arg} is {type(arg)}',
#         #                          'All arguments must be int or float!')
#         for arg in [*args, *kwargs.values()]:  # –ë–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
#             if not isinstance(arg, int) and not isinstance(arg, float):
#                 raise ValueError(f'Type of the {arg} is {type(arg)}',
#                                  'All arguments must be int or float!')
#         result = fn(*args, **kwargs)
#         return result
#
#     return wrapper
#
#
# @validate_args
# def sum_nums(a, b):
#     return a + b
#
#
# try:
#     print(sum_nums(7, 2))
#     print(sum_nums(10.5, 2.3))
#     # print(sum_nums(10.5, '2.3'))
#     # print(sum_nums(a=10.5, b='2.3'))  # —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã –ø–æ–ø–∞–¥–∞–µ–º —É–∂–µ –Ω–µ –≤ *args, –∞ –≤ **kwargs
#     print(sum_nums([1, 2.2, 3], b='2.3'))  # —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã –ø–æ–ø–∞–¥–∞–µ–º —É–∂–µ –Ω–µ –≤ *args, –∞ –≤ **kwargs
# except ValueError as e:
#     print(e)

# –ü—Ä–∏–º–µ—Ä –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# def is_user_auth():
#     return True
#
#
# def check_user_auth(fn):
#     def wrapper(*args, **kwargs):
#         if is_user_auth():
#             return fn(*args, **kwargs)
#         else:
#             raise Exception('User is NOT auth')
#
#     return wrapper
#
#
# @check_user_auth
# def do_sensitive_job():
#     # Do something if usr auth
#     print('Results of some sensitive tasks')
#
#
# try:
#     do_sensitive_job()
# except Exception as e:
#     print(e)


# –ú–û–î–£–õ–ò

# –ú–æ–¥—É–ª–∏ - –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞—Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
# import hacks
# import hacks as hack
# from hacks import connect
# from hacks import connect as con
# from hacks import *

# print(dir(hack))
# print(hack.connect())
# print(connect())
# print(con())

# –ß—Ç–æ —Ç–∞–∫–æ–µ __name__ –∏ __main__
# print(dir())
# print(__name__)
# print(type(__name__))
# print(__name__ == '__main__')

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
# –ü—Ä–∏–º–µ—Ä—ã
# os - –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# smtplib - –ü–æ—á—Ç–∞
# pprint - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å
# time - –î–µ–π—Å—Ç–≤–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
# zipfile - –ê—Ä—Ö–∏–≤—ã
# calendar - –° –¥–∞—Ç–∞–º–∏
# sys - –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# csv - CSV
# regex - –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# math - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
# statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
# random - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

# help('modules')  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
# help('pprint')  # –ß–∏—Ç–∞–µ–º –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
# import math
# print(math.pi)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
# import pack.pack as hacks
#
# hacks.connect()

# Json - Javascript object notation
# –§–æ—Ä–º–∞—Ç –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ—Ö–æ–∂ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å)
# {
#     "id": 1,
#     "brand": "Nike",
#     "qty":84,
#     "status":{
#         "isForSale": true
#     }
# }

# import json
#
# json_str = '{"id":1,"brand":"Nike","qty":84,"status": {"isForSale":true}}'
# sneakers = json.loads(json_str)  # –ò–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å
# print(type(sneakers))
# print(sneakers)
# to_json = json.dumps(sneakers)  # –ò–∑ —Å–ª–æ–≤–∞—Ä—è –≤ json
# print(type(to_json))
# print(to_json)
# to_json = json.dumps(sneakers, indent=1)  # –ò–∑ —Å–ª–æ–≤–∞—Ä—è –≤ json –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤
# print(type(to_json))
# print(to_json)

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# os(—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥) or pathlib(–û–û–ü –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏)
# –°—Ä–∞–≤–Ω–∏–º

# from os import path
# from pathlib import Path
#
# print(path.abspath('.'))
# print(type(path))
# print(Path('.').absolute())
# print(type(Path))
#
# print(path.abspath('/'))
# print(Path('/').absolute())

# from pathlib import Path

# print(Path.cwd())  # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
# –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—É—Ç–∏
# print(Path('usr').joinpath('local').joinpath('bin'))
# print(Path('usr') / 'local' / 'bin')

# print(Path('main.py').exists())
# print(Path('E:\\Projects\\Python\\Python_Django_Data_Science_ML_2023\\basic_knowledge\\main.py').exists())
# print(Path('main.py').is_dir())
# print(Path('main.py').is_file())

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫

# for f in Path('.').iterdir():
#     print(f)

# from os import path
#
# print(path.curdir)
# print(path.abspath('.'))

# from pathlib import Path
#
# cmd = Path('django')
# if not cmd.exists():
#     cmd.mkdir()
#
# print(cmd.exists())
#
# if cmd.exists():
#     cmd.rmdir()

# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
# with open('test.txt') as test_file:
#     print(test_file.read())
#
# with open('test.txt') as test_file:
#     print(test_file.readlines())  # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫, –ø–æ—Å—Ç—Ä–æ–∫–æ–≤–æ

# –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
# with open('new.txt', 'w') as test_file:
#     print(test_file.write('First line in the new file\n'))  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —Å 0
#
# with open('new.txt', 'a') as test_file:
#     print(test_file.write('Second line in the new file\n'))  # –î–æ–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª–∞

# –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª

# from pathlib import Path
# Path('new.txt').unlink()

# test_file = open('test2.txt', 'w') # –°–æ–∑–¥–∞—Å—Ç –∏–ª–∏ –æ–ø—É—Å—Ç–æ—à–∏—Ç —Ñ–∞–π–ª
# # test_file = open('test2.txt', 'a')  # –î–æ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
# # print(type(test_file))
# # print(test_file)
# test_file.write('First line in the new file\n')
# test_file.write('Second line in the new file\n')
#
# # print(test_file.read()) # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ—á–µ—Å—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏
#
# test_file.close()
#
# # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã—Ç—å
# test_file = open('test2.txt')
# print(test_file.read())

# –¢–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –¥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —á—Ç–µ–Ω–∏–µ (–°–∫–∞–∂–µ–º —Ç–∞–∫ –∫—Ä–∞—Ç–∫–∞—è –∑–∞–ø–∏—Å—å)
# with open('test2.txt', 'w') as test_file:
#     test_file.write('First line in the new file\n')
#     test_file.write('Second line in the new file\n')

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ zip –∞—Ä—Ö–∏–≤–æ–≤ 207
# from zipfile import ZipFile
# from pathlib import Path
#
# # if not Path('my-files').exists():
# #     Path('my-files').mkdir()
# #
# # with open('my-files/first.txt', 'w') as my_file:
# #     my_file.write('This is first file')
# #
# # with open('my-files/second.txt', 'w') as my_file:
# #     my_file.write('This is second file')
# # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∑–∏–ø
# # with ZipFile('my-files.zip', mode='w') as my_zip:
# #     # print(my_zip)
# #     for file in Path('my-files').iterdir():
# #         # print(file)
# #         my_zip.write(file)
#
# with ZipFile('my-files.zip', mode='r') as my_zip:
#     print(my_zip.infolist())
#     print(my_zip.filename)
#     print(my_zip.filelist)
#     # my_zip.extractall(path='my-files-unzip')

# CSV
# import csv

# with open('test.csv', 'w') as csv_file:
#     writer = csv.writer(csv_file)
#     writer.writerow(['user_id', 'user_name', 'comments_qty'])
#     writer.writerow([1, 'Vlad', 10])
#     writer.writerow([2, 'Viktor', 1])
#     writer.writerow([1, 'Oksana', 15])

# with open('test.csv', ) as csv_file:
#     reader = csv.reader(csv_file)  # –≤—ã–∑–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
#     # print(type(reader))
#     # print(reader)
#     # for line in reader:
#     #     print(line)
#     csv_list = list(reader)
#     print(csv_list)
#     print(reader.line_num)

# with open('test.csv', 'w') as csv_file:
#     writer = csv.writer(csv_file, delimiter=';')
#     writer.writerow(['user_id', 'user_name', 'comments_qty'])
#     writer.writerow([1, 'Vlad', 10])
#     writer.writerow([2, 'Viktor', 1])
#     writer.writerow([1, 'Oksana', 15])

# Datetime

# from datetime import date, time, datetime, timedelta

# my_date = date(2100, 4, 15)
# print(my_date)
# print(my_date.day)
# print(my_date.weekday())
# print(my_date.year)
# print(my_date.month)
# print(my_date.isocalendar())

# my_time = time(18, 10, 45)
# print(my_time)
# print(my_time.hour)
# print(my_time.isoformat())

# my_datetime = datetime(2024,3,8,18,10,15)
# print(my_datetime)
# print(my_datetime.now())
# print(my_datetime.isoformat())
# print(my_datetime.strftime('%d/%m/%Y'))
# print(my_datetime.strftime('%d-%m/-%Y %H:%M:%S'))

# date_str = '08/03/2024'
# converted_date = datetime.strptime(date_str,'%d/%m/%Y')
# print(converted_date)

# print(timedelta)
# my_datetime = datetime(2024, 3, 8, 18, 10, 15)
# print(my_datetime + timedelta(days=100))  # + —Å—Ç–æ –¥–Ω–µ–π
# print(my_datetime + timedelta(minutes=10))  # + 10 –º–∏–Ω—É—Ç
# print(my_datetime - timedelta(minutes=10))  # - 10 –º–∏–Ω—É—Ç

# Time
# import time
#
# print(time.time())
# print(time.ctime(time.time()))
# start = time.time()
# print(start)
# time.sleep(2.5)
# # –ò–ª–∏ –∫ –ø—Ä–∏–º–µ—Ä—É –Ω–∞–¥–æ –Ω–µ —Å–ª–∏–ø,
# # –∞ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
# end = time.time()
# print('Total duration:', end - start)

# Random
# import random
#
# print(random.random())
# print(random.randint(1, 10))
# print(random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9]))
# print(random.choice('abcd'))
# print(random.choices('abcd', k=2))
# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# random.shuffle(my_list)
# print(my_list)
#
# # –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ
# print(''.join(random.choices('0123456789', k=8)))

# Secrets - –ü–∞—Ä–æ–ª–∏
# import secrets
# import string
#
# # print(string.ascii_letters)
# # print(string.digits)
# # print(string.punctuation)
# # print(string.printable)
# # print(string.hexdigits)
#
# all_chars = string.ascii_letters + string.digits + string.punctuation
# # print(all_chars)
# # password = secrets.choice(all_chars)
# # print(password)
# password = ''.join(secrets.choice(all_chars) for i in range(8))
# print(password)

# Math
# import math
# print(math.pi)
# print(math.e)
# print(math.sqrt(25))
# print(math.log(100))  # –ª–æ–≥–∞—Ä–∏—Ñ–º
# print(math.factorial(10))  # —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ-—Ü–∏—è
# def calc_factorial(num: int) -> int:
#     if num <= 0:
#         raise ValueError('Number must be positive')
#     elif num == 1:
#         return 1
#     return calc_factorial(num - 1) * num
#
#
# print(calc_factorial(10))  # 10*9*8*7*6...
# print(math.factorial(10))

# Re - –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
# import re

# my_str = 'My name is Vlad.'
# res = re.search('Vlad', my_str)
# print(res)
# res = re.search('V..d', my_str) # . –∑–∞–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π —Å–∏–º–≤–æ–ª
# print(res)
# res = re.search('V..d$', my_str)  # . –∑–∞–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
# print(res)
# res = re.search('^M.*name', my_str)  # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –ú –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ name
# print(res)
# res = re.search(r'V..d\.$', my_str)  # –ò—â–µ —Å —Ç–æ—á–∫–æ–π, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
# print(res)
# print(r'V..d\.$')  # r —Å—Ç—Ä–æ–∫–∏, —Ç–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—å—Å—è
# print(res.span())
# print(res.start())
# print(res.end())
# my_pattern = re.compile(r'V..d\.$') # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç–µ—Ä–Ω
# print(my_pattern)
# print(my_pattern.search(my_str))
# my_pattern = re.compile(r'^My.*\.') # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç–µ—Ä–Ω
# print(my_pattern)
# print(my_pattern.search(my_str))
# print(my_pattern.match(my_str))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ email
# email_regexp = r'[a-zA-Z0-9_.]+@[a-zA-Z0-9]+\.[a-zA-Z0-9-.]+$'
#
# email_check_pattern = re.compile(email_regexp)  # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç–µ—Ä–Ω
#
# print(email_check_pattern.fullmatch('bs@gmail.com'))
# print(email_check_pattern.fullmatch('bsgmail.com'))
# print(email_check_pattern.fullmatch('bs-@gmail.com'))
# print(email_check_pattern.fullmatch('bs_@gmail.com'))

# –ó–∞–¥–∞—á–∞
# import re
#
# def check_password(password: str) -> tuple:
#     length_pattern = re.compile(r'^.*\S{8,}.*$')
#     lowercase_pattern = re.compile(r'^.*[a-z]+.*$')
#     uppercase_pattern = re.compile(r'^.*[A-Z]+.*$')
#     number_pattern = re.compile(r'^.*[0-9]+.*$')
#     special_symbol_pattern = re.compile(r'^.*[@%#!&*^]+.*$')
#     no_white_spaces = re.compile(r'^\S*$')
#     if not re.fullmatch(length_pattern, password):
#         return False, 'Password must have at least 8 symbols'
#     elif not re.fullmatch(lowercase_pattern, password):
#         return False, 'Password must have at least one lowercase letter'
#     elif not re.fullmatch(uppercase_pattern, password):
#         return False, 'Password must have at least one uppercase letter'
#     elif not re.fullmatch(number_pattern, password):
#         return False, 'Password must have at least one number'
#     elif not re.fullmatch(special_symbol_pattern, password):
#         return False, 'Password must have at least one special symbol like @%#!&*^'
#     elif not re.fullmatch(no_white_spaces, password):
#         return False, 'Password must`t have  white spaces'
#     else:
#         return True, 'Password ia valid'
#
#
# print(check_password('1234567'))
# print(check_password('12345678'))
# print(check_password('12345678l'))
# print(check_password('12345678Fl'))
# print(check_password('12345678 Fl!'))
# print(check_password('12345678Fl!'))

# SMTPLIB - —Ä–∞—Å—Å—ã–ª–∫–∞ email
# from email.message import EmailMessage
# import smtplib
# from string import Template
# from pathlib import Path
#
# html_tmpl = Template(Path('tmpl/email/index.html').read_text())
# html_content = html_tmpl.substitute({'name': 'Vlad', 'date': '10.10.2024'})
#
# my_email = EmailMessage()
# my_email['from'] = 'Vlad'
# my_email['to'] = 'test@gmail.com'
# my_email['subject'] = 'Hello from Python'
# # my_email.set_content('Hey? How are you doing?')
# my_email.set_content(html_content, 'html')
#
# with open('images/photo.jpg', 'rb') as img:
#     image_data = img.read()
#     my_email.add_attachment(image_data, maintype='image', subtype='jpg', filename='email.jpg')
#
# with smtplib.SMTP(host='192.168.2.1', port=2525) as smtp_server:
#     smtp_server.ehlo()
#     smtp_server.starttls()
#     smtp_server.login('user', 'password')
#     smtp_server.send_message(my_email)

# Sqlite3
# import sqlite3

# DB_NAME = 'sqlite.db'

# courses: list = [
#     (2, 'Java course', 10, 3),
#     (3, 'JavaScript course', 10, 3),
#     (4, 'Php course', 10, 3),
#     (5, 'C++ course', 10, 3),
# ]

# with sqlite3.connect(DB_NAME) as sqlite_conn:
#     # print(sqlite_conn)
#     # print(sqlite3.sqlite_version)
#
#     # sql_request = """CREATE TABLE IF NOT EXISTS courses(
#     # id integer  PRIMARY KEY,
#     # title text NOT NULL,
#     # student_qty integer,
#     # reviews_qty integer
#     # );"""
#     # sqlite_conn.execute(sql_request)
#
#     # sql_request = "INSERT INTO courses VALUES (?,?,?,?)"
#     # sqlite_conn.execute(sql_request, (1, 'Python course', 100, 30))
#     # sqlite_conn.commit()
#
#     # sql_request = "INSERT INTO courses VALUES (?,?,?,?)"
#     # for course in courses:
#     #     sqlite_conn.execute(sql_request, course)
#     # sqlite_conn.commit()
#
#     # sql_request = "SELECT * FROM courses"
#     # result_cursor = sqlite_conn.execute(sql_request)
#     #
#     # # for record in result_cursor: # –ù–µ –∑–∞–±—ã–≤–∞–µ–º —á—Ç–æ –¥–≤–∞ —Ä–∞–∑–∞ –≤—ã–∑—ã–≤–∞—Ç—å –Ω–µ–ª—å–∑—è
#     # #     print(record)
#     # #     print(record[1])
#     #
#     # records = result_cursor.fetchall()
#     # print(records)
#
#     # sql_request = "SELECT * FROM courses WHERE reviews_qty>=10"
#     # result_cursor = sqlite_conn.execute(sql_request)
#     # records = result_cursor.fetchall()
#     # print(records)

# Array
# from array import array
#
# my_array: array = array('i', [4, 10, 5, 7, 5, 15, 7])
# # print(my_array)
# # my_array.append(15)
# # # my_array.append('1')
# # print(my_array)
# # print(my_array.count(5))
# # my_array.pop()
# # print(my_array)
# # for el in my_array:
# #     print(el)
#
# with open('my_array.bin','wb') as my_file:
#     my_array.tofile(my_file)

# Sys
# import sys
#
# print(sys.argv)
# # python basic_knowledge\main.py test first argument
#
# if len(sys.argv) < 3:
#     raise IOError('You must provide 3 arguments')
#
# print(sys.argv[1])

# Webbrowser
# import webbrowser
#
# webbrowser.open('https://www.facebook.com/')

# PIP
# pip3 --version
# pip3 list

# –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é Pipenv
# pip install -user pipenv

# .venv —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
# python pipenv install requests

# import requests
# res = requests.get('https://www.facebook.com/')
# print(res)
# print(res.status_code)
# print(res.text)

# Django
# Model View Controller (MVC)
# Model Template View (–≤ Django MVC->MTV)
# python -m django startproject base . - installation
